/*
Given a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).

For example:
Given binary tree {3,9,20,#,#,15,7},
    3
   / \
  9  20
    /  \
   15   7
return its bottom-up level order traversal as:
[
  [15,7],
  [9,20],
  [3]
]
confused what "{1,#,2,3}" means? > read more on how binary tree is serialized on OJ.
*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 public class Solution {
    public List<List<Integer>> levelOrderBottom(TreeNode root)
    {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        if(root==null) return result;
        traversal(result,root,1);
        Collections.reverse(result);
        return result;
        
    }
    public void traversal(List<List<Integer>> result, TreeNode root,int depth)
    {
        if(root==null) return;
        List<Integer> list=new ArrayList<Integer>();
        if(result.size()==depth-1)
        {
            list.add(root.val);
            result.add(list);
        }
        else if(result.size()>=depth)
        {
            List<Integer> memeda = result.get(depth-1);
            memeda.add(root.val);
        }
        traversal(result,root.left,depth+1);
        traversal(result,root.right,depth+1);
    }
}
