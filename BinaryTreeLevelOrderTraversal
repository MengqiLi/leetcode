/*
Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).

For example:
Given binary tree {3,9,20,#,#,15,7},
    3
   / \
  9  20
    /  \
   15   7
return its level order traversal as:
[
  [3],
  [9,20],
  [15,7]
]
confused what "{1,#,2,3}" means? > read more on how binary tree is serialized on OJ.
*/
public class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) 
    {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        if(root==null) return result;
        traversal(result,root,1);
        return result;
    }
    public void traversal(List<List<Integer>> result, TreeNode root, int depth)
    {
        List<Integer> list = new ArrayList<Integer>();
        if(root==null) return;
        if(result.size()==depth-1)
        {
            list.add(root.val);
            result.add(list);
        }
       else if(result.size()>=depth)
        {
            List<Integer> me = result.get(depth-1);
            me.add(root.val);
        }
        traversal(result,root.left,depth+1);
        traversal(result,root.right,depth+1);
        
    }
}
